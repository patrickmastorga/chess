#include <iostream>
#include <cstdint>
typedef std::uint_fast64_t int64;

/**
 * Contains last square (touching the edge) in every direction from every square [0, 63] -> [a1, h8]
 * directions are ordered [-8, 8, -1, 1, -9, 9, -7, 7]
 */
const std::int_fast8_t DIRECTION_BOUNDS[64][8] = {
    {0, 56, 0, 7, 0, 63, 0, 0},
    {1, 57, 0, 7, 1, 55, 1, 8},
    {2, 58, 0, 7, 2, 47, 2, 16},
    {3, 59, 0, 7, 3, 39, 3, 24},
    {4, 60, 0, 7, 4, 31, 4, 32},
    {5, 61, 0, 7, 5, 23, 5, 40},
    {6, 62, 0, 7, 6, 15, 6, 48},
    {7, 63, 0, 7, 7, 7, 7, 56},
    {0, 56, 8, 15, 8, 62, 1, 8},
    {1, 57, 8, 15, 0, 63, 2, 16},
    {2, 58, 8, 15, 1, 55, 3, 24},
    {3, 59, 8, 15, 2, 47, 4, 32},
    {4, 60, 8, 15, 3, 39, 5, 40},
    {5, 61, 8, 15, 4, 31, 6, 48},
    {6, 62, 8, 15, 5, 23, 7, 56},
    {7, 63, 8, 15, 6, 15, 15, 57},
    {0, 56, 16, 23, 16, 61, 2, 16},
    {1, 57, 16, 23, 8, 62, 3, 24},
    {2, 58, 16, 23, 0, 63, 4, 32},
    {3, 59, 16, 23, 1, 55, 5, 40},
    {4, 60, 16, 23, 2, 47, 6, 48},
    {5, 61, 16, 23, 3, 39, 7, 56},
    {6, 62, 16, 23, 4, 31, 15, 57},
    {7, 63, 16, 23, 5, 23, 23, 58},
    {0, 56, 24, 31, 24, 60, 3, 24},
    {1, 57, 24, 31, 16, 61, 4, 32},
    {2, 58, 24, 31, 8, 62, 5, 40},
    {3, 59, 24, 31, 0, 63, 6, 48},
    {4, 60, 24, 31, 1, 55, 7, 56},
    {5, 61, 24, 31, 2, 47, 15, 57},
    {6, 62, 24, 31, 3, 39, 23, 58},
    {7, 63, 24, 31, 4, 31, 31, 59},
    {0, 56, 32, 39, 32, 59, 4, 32},
    {1, 57, 32, 39, 24, 60, 5, 40},
    {2, 58, 32, 39, 16, 61, 6, 48},
    {3, 59, 32, 39, 8, 62, 7, 56},
    {4, 60, 32, 39, 0, 63, 15, 57},
    {5, 61, 32, 39, 1, 55, 23, 58},
    {6, 62, 32, 39, 2, 47, 31, 59},
    {7, 63, 32, 39, 3, 39, 39, 60},
    {0, 56, 40, 47, 40, 58, 5, 40},
    {1, 57, 40, 47, 32, 59, 6, 48},
    {2, 58, 40, 47, 24, 60, 7, 56},
    {3, 59, 40, 47, 16, 61, 15, 57},
    {4, 60, 40, 47, 8, 62, 23, 58},
    {5, 61, 40, 47, 0, 63, 31, 59},
    {6, 62, 40, 47, 1, 55, 39, 60},
    {7, 63, 40, 47, 2, 47, 47, 61},
    {0, 56, 48, 55, 48, 57, 6, 48},
    {1, 57, 48, 55, 40, 58, 7, 56},
    {2, 58, 48, 55, 32, 59, 15, 57},
    {3, 59, 48, 55, 24, 60, 23, 58},
    {4, 60, 48, 55, 16, 61, 31, 59},
    {5, 61, 48, 55, 8, 62, 39, 60},
    {6, 62, 48, 55, 0, 63, 47, 61},
    {7, 63, 48, 55, 1, 55, 55, 62},
    {0, 56, 56, 63, 56, 56, 7, 56},
    {1, 57, 56, 63, 48, 57, 15, 57},
    {2, 58, 56, 63, 40, 58, 23, 58},
    {3, 59, 56, 63, 32, 59, 31, 59},
    {4, 60, 56, 63, 24, 60, 39, 60},
    {5, 61, 56, 63, 16, 61, 47, 61},
    {6, 62, 56, 63, 8, 62, 55, 62},
    {7, 63, 56, 63, 0, 63, 63, 63}
};

/**
 * Conatins all legal "jumps" a knight can make from a given square [0, 63] -> [a1, h8]
 * First value is index where jumps stop, the rest are the indices of the target square of the jumps
 */
const std::uint_fast8_t KNIGHT_MOVES[64][9] = {
    {3, 10, 17, 0, 0, 0, 0, 0, 0},
    {4, 11, 16, 18, 0, 0, 0, 0, 0},
    {5, 8, 12, 17, 19, 0, 0, 0, 0},
    {5, 9, 13, 18, 20, 0, 0, 0, 0},
    {5, 10, 14, 19, 21, 0, 0, 0, 0},
    {5, 11, 15, 20, 22, 0, 0, 0, 0},
    {4, 12, 21, 23, 0, 0, 0, 0, 0},
    {3, 13, 22, 0, 0, 0, 0, 0, 0},
    {4, 2, 18, 25, 0, 0, 0, 0, 0},
    {5, 3, 19, 24, 26, 0, 0, 0, 0},
    {7, 0, 4, 16, 20, 25, 27, 0, 0},
    {7, 1, 5, 17, 21, 26, 28, 0, 0},
    {7, 2, 6, 18, 22, 27, 29, 0, 0},
    {7, 3, 7, 19, 23, 28, 30, 0, 0},
    {5, 4, 20, 29, 31, 0, 0, 0, 0},
    {4, 5, 21, 30, 0, 0, 0, 0, 0},
    {5, 1, 10, 26, 33, 0, 0, 0, 0},
    {7, 0, 2, 11, 27, 32, 34, 0, 0},
    {9, 1, 3, 8, 12, 24, 28, 33, 35},
    {9, 2, 4, 9, 13, 25, 29, 34, 36},
    {9, 3, 5, 10, 14, 26, 30, 35, 37},
    {9, 4, 6, 11, 15, 27, 31, 36, 38},
    {7, 5, 7, 12, 28, 37, 39, 0, 0},
    {5, 6, 13, 29, 38, 0, 0, 0, 0},
    {5, 9, 18, 34, 41, 0, 0, 0, 0},
    {7, 8, 10, 19, 35, 40, 42, 0, 0},
    {9, 9, 11, 16, 20, 32, 36, 41, 43},
    {9, 10, 12, 17, 21, 33, 37, 42, 44},
    {9, 11, 13, 18, 22, 34, 38, 43, 45},
    {9, 12, 14, 19, 23, 35, 39, 44, 46},
    {7, 13, 15, 20, 36, 45, 47, 0, 0},
    {5, 14, 21, 37, 46, 0, 0, 0, 0},
    {5, 17, 26, 42, 49, 0, 0, 0, 0},
    {7, 16, 18, 27, 43, 48, 50, 0, 0},
    {9, 17, 19, 24, 28, 40, 44, 49, 51},
    {9, 18, 20, 25, 29, 41, 45, 50, 52},
    {9, 19, 21, 26, 30, 42, 46, 51, 53},
    {9, 20, 22, 27, 31, 43, 47, 52, 54},
    {7, 21, 23, 28, 44, 53, 55, 0, 0},
    {5, 22, 29, 45, 54, 0, 0, 0, 0},
    {5, 25, 34, 50, 57, 0, 0, 0, 0},
    {7, 24, 26, 35, 51, 56, 58, 0, 0},
    {9, 25, 27, 32, 36, 48, 52, 57, 59},
    {9, 26, 28, 33, 37, 49, 53, 58, 60},
    {9, 27, 29, 34, 38, 50, 54, 59, 61},
    {9, 28, 30, 35, 39, 51, 55, 60, 62},
    {7, 29, 31, 36, 52, 61, 63, 0, 0},
    {5, 30, 37, 53, 62, 0, 0, 0, 0},
    {4, 33, 42, 58, 0, 0, 0, 0, 0},
    {5, 32, 34, 43, 59, 0, 0, 0, 0},
    {7, 33, 35, 40, 44, 56, 60, 0, 0},
    {7, 34, 36, 41, 45, 57, 61, 0, 0},
    {7, 35, 37, 42, 46, 58, 62, 0, 0},
    {7, 36, 38, 43, 47, 59, 63, 0, 0},
    {5, 37, 39, 44, 60, 0, 0, 0, 0},
    {4, 38, 45, 61, 0, 0, 0, 0, 0},
    {3, 41, 50, 0, 0, 0, 0, 0, 0},
    {4, 40, 42, 51, 0, 0, 0, 0, 0},
    {5, 41, 43, 48, 52, 0, 0, 0, 0},
    {5, 42, 44, 49, 53, 0, 0, 0, 0},
    {5, 43, 45, 50, 54, 0, 0, 0, 0},
    {5, 44, 46, 51, 55, 0, 0, 0, 0},
    {4, 45, 47, 52, 0, 0, 0, 0, 0},
    {3, 46, 53, 0, 0, 0, 0, 0, 0}
};

using namespace std;
int main()
{
	// Knight
    cout << "{\n";

    for (int i = 0; i < 64; ++i) {
        int64 mask = 0;
        for (int j = 1; j < KNIGHT_MOVES[i][0]; ++j) {
            mask += (1ULL << KNIGHT_MOVES[i][j]);
        }

        cout << mask << "ULL, ";
        if (i % 8 == 7) {
            cout << endl;
        }
    }

    cout << "},\n";

    // Bishop
    cout << "{\n";

    for (int i = 0; i < 64; ++i) {
        int64 mask = 0;
        
        for (int j = i - 9; j >= DIRECTION_BOUNDS[i][4]; j -= 9) {
            mask += (1ULL << j);
        }

        for (int j = i + 9; j <= DIRECTION_BOUNDS[i][5]; j += 9) {
            mask += (1ULL << j);

        }

        for (int j = i - 7; j >= DIRECTION_BOUNDS[i][6]; j -= 7) {
            mask += (1ULL << j);

        }

        for (int j = i + 7; j <= DIRECTION_BOUNDS[i][7]; j += 7) {
            mask += (1ULL << j);
        }

        cout << mask << "ULL, ";
        if (i % 8 == 7) {
            cout << endl;
        }
    }

    cout << "},\n";

    // Rook
    cout << "{\n";

    for (int i = 0; i < 64; ++i) {
        int64 mask = 0;

        for (int j = i - 8; j >= DIRECTION_BOUNDS[i][0]; j -= 8) {
            mask += (1ULL << j);
        }

        for (int j = i + 8; j <= DIRECTION_BOUNDS[i][1]; j += 8) {
            mask += (1ULL << j);

        }

        for (int j = i - 1; j >= DIRECTION_BOUNDS[i][2]; j -= 1) {
            mask += (1ULL << j);

        }

        for (int j = i + 1; j <= DIRECTION_BOUNDS[i][3]; j += 1) {
            mask += (1ULL << j);
        }

        cout << mask << "ULL, ";
        if (i % 8 == 7) {
            cout << endl;
        }
    }

    cout << "},\n";

    // Queen
    cout << "{\n";

    for (int i = 0; i < 64; ++i) {
        int64 mask = 0;

        for (int j = i - 9; j >= DIRECTION_BOUNDS[i][4]; j -= 9) {
            mask += (1ULL << j);
        }

        for (int j = i + 9; j <= DIRECTION_BOUNDS[i][5]; j += 9) {
            mask += (1ULL << j);

        }

        for (int j = i - 7; j >= DIRECTION_BOUNDS[i][6]; j -= 7) {
            mask += (1ULL << j);

        }

        for (int j = i + 7; j <= DIRECTION_BOUNDS[i][7]; j += 7) {
            mask += (1ULL << j);
        }

        for (int j = i - 8; j >= DIRECTION_BOUNDS[i][0]; j -= 8) {
            mask += (1ULL << j);
        }

        for (int j = i + 8; j <= DIRECTION_BOUNDS[i][1]; j += 8) {
            mask += (1ULL << j);

        }

        for (int j = i - 1; j >= DIRECTION_BOUNDS[i][2]; j -= 1) {
            mask += (1ULL << j);

        }

        for (int j = i + 1; j <= DIRECTION_BOUNDS[i][3]; j += 1) {
            mask += (1ULL << j);
        }

        cout << mask << "ULL, ";
        if (i % 8 == 7) {
            cout << endl;
        }
    }

    cout << "}\n";

	return 0;
}