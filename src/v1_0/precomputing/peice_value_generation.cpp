#include <iostream>
#include <iomanip>

using namespace std;

#define POSITIONAL_WEIGHT 1.0f

/*
 BASIC TABLES https://www.chessprogramming.org/Simplified_Evaluation_Function
*/
const int EARLYGAME_BLACK_FLIPPED[6][64] = {
    {
        0,  0,  0,  0,  0,  0,  0,  0,
        50, 50, 50, 50, 50, 50, 50, 50,
        10, 10, 20, 30, 30, 20, 10, 10,
        5,  5, 10, 25, 25, 10,  5,  5,
        0,  0,  0, 20, 20,  0,  0,  0,
        5, -5,-10,  0,  0,-10, -5,  5,
        5, 10, 10,-20,-20, 10, 10,  5,
        0,  0,  0,  0,  0,  0,  0,  0
    },
    {
        -50,-40,-30,-30,-30,-30,-40,-50,
        -40,-20,  0,  0,  0,  0,-20,-40,
        -30,  0, 10, 15, 15, 10,  0,-30,
        -30,  5, 15, 20, 20, 15,  5,-30,
        -30,  0, 15, 20, 20, 15,  0,-30,
        -30,  5, 10, 15, 15, 10,  5,-30,
        -40,-20,  0,  5,  5,  0,-20,-40,
        -50,-40,-30,-30,-30,-30,-40,-50,
    },
    {
        -20,-10,-10,-10,-10,-10,-10,-20,
        -10,  0,  0,  0,  0,  0,  0,-10,
        -10,  0,  5, 10, 10,  5,  0,-10,
        -10,  5,  5, 10, 10,  5,  5,-10,
        -10,  0, 10, 10, 10, 10,  0,-10,
        -10, 10, 10, 10, 10, 10, 10,-10,
        -10,  5,  0,  0,  0,  0,  5,-10,
        -20,-10,-10,-10,-10,-10,-10,-20,
    },
    {
        0,  0,  0,  0,  0,  0,  0,  0,
        5, 10, 10, 10, 10, 10, 10,  5,
        -5,  0,  0,  0,  0,  0,  0, -5,
        -5,  0,  0,  0,  0,  0,  0, -5,
        -5,  0,  0,  0,  0,  0,  0, -5,
        -5,  0,  0,  0,  0,  0,  0, -5,
        -5,  0,  0,  0,  0,  0,  0, -5,
        0,  0,  0,  5,  5,  0,  0,  0
    },
    {
        -20,-10,-10, -5, -5,-10,-10,-20,
        -10,  0,  0,  0,  0,  0,  0,-10,
        -10,  0,  5,  5,  5,  5,  0,-10,
        -5,  0,  5,  5,  5,  5,  0, -5,
         0,  0,  5,  5,  5,  5,  0, -5,
        -10,  5,  5,  5,  5,  5,  0,-10,
        -10,  0,  5,  0,  0,  0,  0,-10,
        -20,-10,-10, -5, -5,-10,-10,-20
    },
    {
        -50,-40,-30,-20,-20,-30,-40,-50,
        -30,-20,-10,  0,  0,-10,-20,-30,
        -30,-10, 20, 30, 30, 20,-10,-30,
        -30,-10, 30, 40, 40, 30,-10,-30,
        -30,-10, 30, 40, 40, 30,-10,-30,
        -30,-10, 20, 30, 30, 20,-10,-30,
        -30,-30,  0,  0,  0,  0,-30,-30,
        -50,-30,-30,-30,-30,-30,-30,-50
    }
};

int main()
{
    int peiceValues[15] = {0, 100, 320, 330, 500, 900, 0, 0, 0, -100, -320, -330, -500, -900, 0};

    for (int p = 0; p < 15; ++p) {
        if (p == 0 || p == 7 || p == 8) {
            // All zeroes
            cout << "    {\n";

            for (int i = 0; i < 8; ++i) {
                cout << "        ";
                for (int j = 0; j < 8; ++j) {
                    cout << "0, ";
                }
                cout << endl;
            }

            cout << "    },\n";

        } else if (p < 8) {
            // White
            cout << "    {\n";

            for (int r = 56; r >= 0; r -= 8) {
                cout << "        ";
                for (int f = 0; f < 8; ++f) {
                    cout << std::setw(4) << POSITIONAL_WEIGHT * EARLYGAME_BLACK_FLIPPED[p - 1][r + f] + peiceValues[p] << ",";
                }
                cout << endl;
            }

            cout << "    },\n";

        } else {
            // Black
            cout << "    {\n";

            for (int r = 0; r < 64; r += 8) {
                cout << "        ";
                for (int f = 0; f < 8; ++f) {
                    cout << std::setw(4) << -POSITIONAL_WEIGHT * EARLYGAME_BLACK_FLIPPED[p - 9][r + f] + peiceValues[p] << ",";
                }
                cout << endl;
            }

            cout << "    },\n";
        }
    }


    return 0;
}

/*
 FANCIER TABLES
 based on https://www.chessprogramming.org/Simplified_Evaluation_Function
      and https://www.chessprogramming.org/PeSTO%27s_Evaluation_Function
*/
// Horizontally flipped
const int BLACK_EG_PAWN[64] = {
  0,  0,  0,  0,  0,  0,  0,  0,
 50, 60, 35, 50, 40, 60, 15, -5,
  5, 10, 20, 20, 30, 20, 10,-10,
  0,  5, 10, 25, 25, 10,  5,-10,
 -5,  0,  0, 18, 20,  0,  5,-10,
 -5, -5, -5, -5,  0,-10, 15, -5,
 -5,  5,-10,-25,-20, 15, 20,-10,
  0,  0,  0,  0,  0,  0,  0,  0
};

const int BLACK_EG_KNIGHT[64] = {
-90,-40,-20,-20,-10,-40,-20,-70,
-40,-20, 20, 10,  5, 15,-10,-40,
-30, 25, 10, 25, 25, 50, 30, 10,
-10,  5, 15, 20, 20, 15,  5,  5,
-10,  5, 15, 15, 20, 15,  5,-10,
-20,  5, 10, 15, 15, 10, 10,-20,
-40,-20,  0,  5,  5,  5,-20,-20,
-70,-30,-40,-30,-20,-30,-20,-30,
};

const int BLACK_EG_BISHOP[64] {
-20, -5,-30,-20,-10,-20, -5,-10,
-15,  5, -5, -5, 10, 20,  5,-20,
-10, 15, 15, 15, 15, 20, 15, -5,
-10,  5, 10, 20, 15, 15,  5, -5,
-10,  5, 10, 15, 20, 10,  5, -5,
 -5, 10, 10, 10, 10, 15, 10,  0,
 -5,  7,  7,  0,  0, 10, 15, -5,
-20,-10,-10,-15,-10,-10,-20,-20,
};

const int BLACK_EG_ROOK[64] = {
 10, 15, 10, 15, 20,  5, 10, 15,
 10, 15, 30, 30, 40, 30, 10, 15,
 -5,  5,  5, 10,  5, 10, 20,  5,
-10,  0,  0,  5,  5,  5,  0,-10,
-10, -5,  0,  0,  0,  0,  0,-10,
-15, -5, -3, -3,  0,  0,  0,-15,
-15, -5, -5,  0,  0,  0,  0,-30,
 -5, -5,  0, 10, 10,  3,-10, -7
};