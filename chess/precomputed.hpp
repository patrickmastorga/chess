#include <cstdint>

typedef std::uint_fast8_t uint8;
typedef std::int_fast8_t int8;
typedef std::uint_fast16_t uint16;
typedef std::int_fast16_t int16;
typedef std::uint_fast32_t uint32;
typedef std::uint_fast64_t uint64;

/**
 * Value of every peice (index is peice id) at every index [0, 63] -> [a1, h8]
 * Used for evaluating a position
 */
const int16 STANDARD_PEICE_VALUE[15][64];

/**
 * Value of every peice (index is peice id) at every index [0, 63] -> [a1, h8]
 * Used for evaluating a position
 */
const int16 ENDGAME_PEICE_VALUE[15][64];

/**
 * Conatins all legal "jumps" a knight can make from a given square [0, 63] -> [a1, h8]
 * First value is index where jumps stop, the rest are amounts to jump
 */
const int8 KNIGHT_MOVES[64][9] = {
    {3, 10, 17, 0, 0, 0, 0, 0, 0},
    {4, 10, 15, 17, 0, 0, 0, 0, 0},
    {5, 6, 10, 15, 17, 0, 0, 0, 0},
    {5, 6, 10, 15, 17, 0, 0, 0, 0},
    {5, 6, 10, 15, 17, 0, 0, 0, 0},
    {5, 6, 10, 15, 17, 0, 0, 0, 0},
    {4, 6, 15, 17, 0, 0, 0, 0, 0},
    {3, 6, 15, 0, 0, 0, 0, 0, 0},
    {4, -6, 10, 17, 0, 0, 0, 0, 0},
    {5, -6, 10, 15, 17, 0, 0, 0, 0},
    {7, -10, -6, 6, 10, 15, 17, 0, 0},
    {7, -10, -6, 6, 10, 15, 17, 0, 0},
    {7, -10, -6, 6, 10, 15, 17, 0, 0},
    {7, -10, -6, 6, 10, 15, 17, 0, 0},
    {5, -10, 6, 15, 17, 0, 0, 0, 0},
    {4, -10, 6, 15, 0, 0, 0, 0, 0},
    {5, -15, -6, 10, 17, 0, 0, 0, 0},
    {7, -17, -15, -6, 10, 15, 17, 0, 0},
    {9, -17, -15, -10, -6, 6, 10, 15, 17},
    {9, -17, -15, -10, -6, 6, 10, 15, 17},
    {9, -17, -15, -10, -6, 6, 10, 15, 17},
    {9, -17, -15, -10, -6, 6, 10, 15, 17},
    {7, -17, -15, -10, 6, 15, 17, 0, 0},
    {5, -17, -10, 6, 15, 0, 0, 0, 0},
    {5, -15, -6, 10, 17, 0, 0, 0, 0},
    {7, -17, -15, -6, 10, 15, 17, 0, 0},
    {9, -17, -15, -10, -6, 6, 10, 15, 17},
    {9, -17, -15, -10, -6, 6, 10, 15, 17},
    {9, -17, -15, -10, -6, 6, 10, 15, 17},
    {9, -17, -15, -10, -6, 6, 10, 15, 17},
    {7, -17, -15, -10, 6, 15, 17, 0, 0},
    {5, -17, -10, 6, 15, 0, 0, 0, 0},
    {5, -15, -6, 10, 17, 0, 0, 0, 0},
    {7, -17, -15, -6, 10, 15, 17, 0, 0},
    {9, -17, -15, -10, -6, 6, 10, 15, 17},
    {9, -17, -15, -10, -6, 6, 10, 15, 17},
    {9, -17, -15, -10, -6, 6, 10, 15, 17},
    {9, -17, -15, -10, -6, 6, 10, 15, 17},
    {7, -17, -15, -10, 6, 15, 17, 0, 0},
    {5, -17, -10, 6, 15, 0, 0, 0, 0},
    {5, -15, -6, 10, 17, 0, 0, 0, 0},
    {7, -17, -15, -6, 10, 15, 17, 0, 0},
    {9, -17, -15, -10, -6, 6, 10, 15, 17},
    {9, -17, -15, -10, -6, 6, 10, 15, 17},
    {9, -17, -15, -10, -6, 6, 10, 15, 17},
    {9, -17, -15, -10, -6, 6, 10, 15, 17},
    {7, -17, -15, -10, 6, 15, 17, 0, 0},
    {5, -17, -10, 6, 15, 0, 0, 0, 0},
    {4, -15, -6, 10, 0, 0, 0, 0, 0},
    {5, -17, -15, -6, 10, 0, 0, 0, 0},
    {7, -17, -15, -10, -6, 6, 10, 0, 0},
    {7, -17, -15, -10, -6, 6, 10, 0, 0},
    {7, -17, -15, -10, -6, 6, 10, 0, 0},
    {7, -17, -15, -10, -6, 6, 10, 0, 0},
    {5, -17, -15, -10, 6, 0, 0, 0, 0},
    {4, -17, -10, 6, 0, 0, 0, 0, 0},
    {3, -15, -6, 0, 0, 0, 0, 0, 0},
    {4, -17, -15, -6, 0, 0, 0, 0, 0},
    {5, -17, -15, -10, -6, 0, 0, 0, 0},
    {5, -17, -15, -10, -6, 0, 0, 0, 0},
    {5, -17, -15, -10, -6, 0, 0, 0, 0},
    {5, -17, -15, -10, -6, 0, 0, 0, 0},
    {4, -17, -15, -10, 0, 0, 0, 0, 0},
    {3, -17, -10, 0, 0, 0, 0, 0, 0},
};
